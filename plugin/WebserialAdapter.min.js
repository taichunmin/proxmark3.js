!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Pm3WebserialAdapter=e()}(this,(function(){"use strict";const t=[{usbVendorId:11565,usbProductId:20557},{usbVendorId:39620,usbProductId:19343},{usbVendorId:7531,usbProductId:262}];return class{constructor(){this._isOpen=!1,this.name="adapter",this.port=null,this.portInfo=null}install(e,r){const{pm3:o,utils:i}=e;if(o.$adapter)throw new Error("adapter already exists");const s=async()=>"serial"in navigator,n=()=>this._isOpen,a=async()=>{i.logTime("device disconnected"),this._isOpen=!1,this.portInfo=null,this.port.removeEventListener("disconnect",a),this.port=null},d=async()=>{if(!await s())throw new Error("WebSerial not supported");if(this.port=await navigator.serial.requestPort({filters:t}),!this.port)throw new Error("no port");const e=this.portInfo=await this.port.getInfo();i.logTime(`port selected, usbVendorId = ${e.usbVendorId}, usbProductId = ${e.usbProductId}`),await this.port.open({baudRate:115200}),this.port.addEventListener("disconnect",a);for(let t=0;!n()&&t<100;t++)this.port?.readable&&this.port?.writable?(o.tx=new TransformStream({flush:async t=>{await a(),t.terminate()},transform:async(t,e)=>{e.enqueue(t)}}),o.tx.readable.pipeTo(this.port.writable),this.port.readable.pipeTo(o.rx.writable),this._isOpen=!0):await i.sleep(10);if(!n())throw await a(),new Error("WebSerial not supported")};return o.addMiddleware("writePacket",(async(t,e)=>(n()||await d(),await e()))),{connect:d,disconnect:a,isOpen:n,isSupport:s}}}}));
